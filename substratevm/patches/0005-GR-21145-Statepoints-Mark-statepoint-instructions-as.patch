From 80b1d876fd4296b48433de5b66eaebe551897508 Mon Sep 17 00:00:00 2001
From: Loic Ottet <loic.ottet@oracle.com>
Date: Wed, 12 Feb 2020 14:04:45 +0100
Subject: [PATCH 5/5] [GR-21145][Statepoints] Mark statepoint instructions as
 clobbering LR on AArch64

---
 llvm/lib/Target/AArch64/AArch64.h             |  2 +
 .../Target/AArch64/AArch64ClobberLRPass.cpp   | 71 +++++++++++++++++++
 .../Target/AArch64/AArch64TargetMachine.cpp   |  3 +
 llvm/lib/Target/AArch64/CMakeLists.txt        |  1 +
 4 files changed, 77 insertions(+)
 create mode 100644 llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp

diff --git a/llvm/lib/Target/AArch64/AArch64.h b/llvm/lib/Target/AArch64/AArch64.h
index 6965403a25a..65ec05db681 100644
--- a/llvm/lib/Target/AArch64/AArch64.h
+++ b/llvm/lib/Target/AArch64/AArch64.h
@@ -57,6 +57,7 @@ createAArch64InstructionSelector(const AArch64TargetMachine &,
                                  AArch64Subtarget &, AArch64RegisterBankInfo &);
 FunctionPass *createAArch64PreLegalizeCombiner();
 FunctionPass *createAArch64StackTaggingPass();
+FunctionPass *createAArch64ClobberLRPass();
 
 void initializeAArch64A53Fix835769Pass(PassRegistry&);
 void initializeAArch64A57FPLoadBalancingPass(PassRegistry&);
@@ -80,6 +81,7 @@ void initializeFalkorHWPFFixPass(PassRegistry&);
 void initializeFalkorMarkStridedAccessesLegacyPass(PassRegistry&);
 void initializeLDTLSCleanupPass(PassRegistry&);
 void initializeAArch64StackTaggingPass(PassRegistry&);
+void initializeAArch64ClobberLRPass(PassRegistry&);
 } // end namespace llvm
 
 #endif
diff --git a/llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp b/llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp
new file mode 100644
index 00000000000..91b1a542327
--- /dev/null
+++ b/llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp
@@ -0,0 +1,71 @@
+//===- AArch64ClobberLRPass.cpp - Expand pseudo instructions --------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+//
+// This file contains a pass that sets LR as implicit-def for statepoints,
+// patchpoints and stackmap instrinsics. This is needed as these instructions
+// are defined globally with no knowledge of AArch64-specific requirements.
+// As these intrinsics are lowered to calls after the register allocator runs,
+// it is necessary to specify that they clobber the link register beforehand.
+//
+//===----------------------------------------------------------------------===//
+
+#include "AArch64.h"
+#include "AArch64RegisterInfo.h"
+#include "AArch64Subtarget.h"
+#include "llvm/CodeGen/MachineFunction.h"
+#include "llvm/CodeGen/MachineFunctionPass.h"
+#include "llvm/CodeGen/MachineInstr.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Pass.h"
+
+using namespace llvm;
+
+#define DEBUG_TYPE "aarch64-dead-defs"
+
+#define AARCH64_CLOBBER_LR_NAME "AArch64 statepoint LR clobbering pass"
+
+namespace {
+struct AArch64ClobberLR : public MachineFunctionPass {
+public:
+  static char ID;
+
+  AArch64ClobberLR() : MachineFunctionPass(ID) {
+    initializeAArch64ClobberLRPass(*PassRegistry::getPassRegistry());
+  }
+
+  bool runOnMachineFunction(MachineFunction &MF) override;
+
+  StringRef getPassName() const override { return AARCH64_CLOBBER_LR_NAME; }
+};
+}
+
+char AArch64ClobberLR::ID = 0;
+
+INITIALIZE_PASS(AArch64ClobberLR, "aarch64-clobber-lr",
+                AARCH64_CLOBBER_LR_NAME, false, false)
+
+bool AArch64ClobberLR::runOnMachineFunction(MachineFunction &MF) {
+  auto TRI = MF.getSubtarget().getRegisterInfo();
+  bool Modified = false;
+  for (MachineBasicBlock &MBB : MF) {
+    for (MachineInstr &MI : MBB) {
+      if (MI.getOpcode() == TargetOpcode::STACKMAP ||
+        MI.getOpcode() == TargetOpcode::PATCHPOINT ||
+        MI.getOpcode() == TargetOpcode::STATEPOINT) {
+        MI.addRegisterDefined(AArch64::LR, TRI);
+        Modified = true;
+      }
+    }
+  }
+  return Modified;
+}
+
+FunctionPass *llvm::createAArch64ClobberLRPass() {
+  return new AArch64ClobberLR();
+}
\ No newline at end of file
diff --git a/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp b/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp
index 86546148049..dc9c146f085 100644
--- a/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp
+++ b/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp
@@ -180,6 +180,7 @@ extern "C" void LLVMInitializeAArch64Target() {
   initializeLDTLSCleanupPass(*PR);
   initializeAArch64SpeculationHardeningPass(*PR);
   initializeAArch64StackTaggingPass(*PR);
+  initializeAArch64ClobberLRPass(*PR);
 }
 
 //===----------------------------------------------------------------------===//
@@ -555,6 +556,8 @@ void AArch64PassConfig::addPreRegAlloc() {
     // be register coaleascer friendly.
     addPass(&PeepholeOptimizerID);
   }
+
+  addPass(createAArch64ClobberLRPass());
 }
 
 void AArch64PassConfig::addPostRegAlloc() {
diff --git a/llvm/lib/Target/AArch64/CMakeLists.txt b/llvm/lib/Target/AArch64/CMakeLists.txt
index 3154ed03bd4..b0b13a91681 100644
--- a/llvm/lib/Target/AArch64/CMakeLists.txt
+++ b/llvm/lib/Target/AArch64/CMakeLists.txt
@@ -27,6 +27,7 @@ add_llvm_target(AArch64CodeGen
   AArch64CallingConvention.cpp
   AArch64CallLowering.cpp
   AArch64CleanupLocalDynamicTLSPass.cpp
+  AArch64ClobberLRPass.cpp
   AArch64CollectLOH.cpp
   AArch64CondBrTuning.cpp
   AArch64ConditionalCompares.cpp
-- 
2.21.1 (Apple Git-122.3)

